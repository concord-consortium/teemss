TypedObject - A very basic extension of LabObject that has string type
and string version.  These two fields are used to identify the format
of its sub objects.  (This might lead to simplify several existing objects)

FormBlank -  It has a display object, and a external 
database id for its raw data.  And it has one or more FormItem TypedObject objects.
And it has a folder where responses will be stored.
It also dispays, or reads the event from, the submit button.
This has the code for processing FormItems.  Creating responses, and response items.

FormItem (TypedObject) -  It has a external database id (RawData object).  It has a
prompt object and an input object.  It also has a display object that probably is 
a supernote with the two objects inside of it.  This can be accomplished with a
simple folder.  As long as the FormItem doesn't need to be viewed outside of
a form blank.  For objects like this it would be nice to be able to type them.
This way we can identify that their subobject adhere to a particular format.

Response (TypedObject) - 
The response has date, time, user, and the formblank that created it.
The reponse also has one or more ResponseItems.  

ResponseItem (TypedObject) -
has the FormItem that created it, and RawData object 
that is the output from calling writeExternalInput on the input object of the 
FormItem.

The input object has to implement the input object interface.  This interface 
adds an additional serialization method.  The default serialization method 
(writeExternal) saves the complete state of the object.  The input object interface
adds writeExternalInput.  This method saves just the state of the object that the 
user changed.  One generic way to do this is to call reinstanciate the orignal input
object and pass that to writeExernalInput.  Then the object can store a diff of 
itself and this object.  

What is the sequence of events?
The FormBlank is displayed this instanciates all visible form items.
A user fills out a form.  
The user submits the form.  (there could be a submit button, and if the user
didn't press it tried to leave then it could force a comfirm)
This creates a new response in the reponse folder.

To read the responses back.  First the requested formblank object must be found.
One way is to find all formblank objects in the labbook.  
Another way is to use the database to find all the formblank objects.
In the second case the form blank doesn't need to have the external database id in
it.  In the first case the external database id must be in the object.

So what new objects need to be created:
FormBlank, TypedObject, RawDataObject.

One design choice.  Does the external database store the info about the labbook 
or does the labbook store the info about the database.  I'd guess we'd want both
for the most flexibility.  We could conditionally store "cookie" info in the formblank
and form item objects.
 

