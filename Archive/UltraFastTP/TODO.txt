- not started by anyone yet.
+ started by Dima
@ started by Scott
* done

UI components:
+Modal dialog boxes (look at extras)
-Scroll Bars (look at WabaCE)
-Tables (look at WabaCE)
-More robust Property Sheet handling (see wgraph/PropWin
wgraph/PropPage) these are generic ways to display and change the
properties of an object
-Expandable Tree View  (See WabaCE)
-Tool palette: array of equal sized buttons, one selected at a time, ability to
put icons, in buttons, doesn't need to float.

Graphing Additions/Fixes:
-Region selecting mode
-Zooming by drawing a box mode
-Mode selection: how does the user select what mode the graph is in?
menu, toolbar, ...
-Speedup graph scrolling and zooming on wince, (probably requires
hacking VM)
-Speedup graph zooming on palm, remove unecessary floating point
operations
-Reduce memory consumed by storing data points for the graph (see
wgraph/Bin)
-Speed up graph zooming(again...)(slow on wince)
-Bug in when zooming far on graph.  (due to end point of inner while loop in
update and recalc)

LabBook 
@spec api for accessing "lab objects"
--Create a "java object" given a "lab object ptr"
--Store a "java object" and return a "lab object ptr"
--Might want read about object databases to see the standard
(http://www.odmg.org/)
--Do java instaniations of LabObjects need to contain a Vector of
"Properties"? Or can a LabObject's "properties" be just fields in the
specific java class representing that object.  The question here is size
and and speed of lab objects.
-spec file format for systems with files (everything but palm)
-spec pdb(Palm DataBase) format for palm
-spec api to genericly access these two storage formats (file, pdb)

Calibrations
-support table and arbitrary function calibrations
--need parser for function definitions
--integrate with current Transform architecture.  (probably means
seriously modifing Transform architecture)
-UI for user calibrating own probe

Syncing
-How will this be done?
-Do we need a conduit?
-What are conduits written in?

Scott
